#!/bin/bash

# Initialize variables
declare -A orgs
declare -A org_peers
declare -A orderers

# Parse orgs_and_peers.txt
while IFS= read -r line || [[ -n "$line" ]]; do
    if [[ $line =~ ^Organization:\ (.+)$ ]]; then
        current_org="${BASH_REMATCH[1]}"
        orgs["$current_org"]="" # Initialize org
    elif [[ $line =~ orderer[0-9]*\.example\.com ]]; then
        orderer_hostname=$(echo "$line" | awk -F'[.:]' '{print $1}')
        orderers["$orderer_hostname"]=1 # Store unique orderers
    elif [[ $line =~ .*\.example\.com:[0-9]+ ]]; then
        peer_hostname=$(echo "$line" | awk -F'[.:]' '{print $1}')
        org_peers["$current_org"]+="$peer_hostname "
    fi
done < orgs_and_peers.txt

# Start generating crypto-config.yaml with OrdererOrgs section
{
echo "# crypto-config.yaml file generated by script"
echo "OrdererOrgs:"
echo "  - Name: Orderer"
echo "    Domain: example.com"
echo "    Specs:"

# Add orderer specs
for orderer in "${!orderers[@]}"; do
    echo "      - Hostname: $orderer"
done

# Add PeerOrgs section
echo "PeerOrgs:"

# Loop through organizations and generate their sections
for org in "${!orgs[@]}"; do
    # Capitalize first letter of organization name for display
    org_name_capitalized="${org^}"
    echo "  - Name: $org_name_capitalized"
    echo "    Domain: ${org}.example.com"
    echo "    EnableNodeOUs: true"
    echo "    Specs:"

    # Add peer specs for the organization
    IFS=' ' read -ra peers <<< "${org_peers[$org]}"
    for peer in "${peers[@]}"; do
        echo "      - Hostname: $peer"
    done

    # Add Users section
    echo "    Users:"
    echo "      Count: 1"
done
} > crypto-config.yaml

echo "crypto-config.yaml has been generated."
